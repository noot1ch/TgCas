from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

from database.database import db, save_db
import app.keyboards as kb
from app.twisters import get_roller_multiplier, get_dice_multiplier

router = Router()

def log_message(message):
    print(f'[{message.from_user.username}]{message.text}')

    id = str(message.from_user.id)
    if id not in db:
        db[id] = {'balance': 0, 'username': message.from_user.username, 'bid': 10}
        save_db(db)


class user(StatesGroup):
    balance = State()
    bid = State()
    rolling = State()


@router.message(user.rolling)
async def anti_spam(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ')


@router.message(F.text == '–ù–∞–∑–∞–¥')
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    log_message(message)

    await message.answer('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞', reply_markup=kb.main)


@router.message(F.text == '–ö—Ä—É—Ç–∏–ª–∫–∏')
async def slots(message: Message, state: FSMContext):
    await state.clear()
    log_message(message)

    await message.answer(f'–≤—ã–±–µ—Ä–∏ –∫—Ä—É—Ç–∏–ª–∫—É (—Ç–≤–æ—è —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ {db[str(message.from_user.id)]['bid']})', reply_markup=kb.twisters)
    

@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message, state: FSMContext):
    await state.clear()
    log_message(message)

    await message.answer(f'–ü—Ä–æ—Ñ–∏–ª—å\n–ù–∏–∫: {message.from_user.username}\n–ë–∞–ª–∞–Ω—Å: {db[str(message.from_user.id)]['balance']}\n',
                         reply_markup=kb.profile)


@router.message(F.text == '–ö—Ä—É—Ç–∏–ª–∫–∞ 1')
async def roller(message: Message, state: FSMContext):
    log_message(message)

    if db[str(message.from_user.id)]['balance'] >= db[str(message.from_user.id)]['bid']:
        bid = db[str(message.from_user.id)]['bid']
        db[str(message.from_user.id)]['balance'] -= bid

        await state.set_state(user.rolling)
        dice_msg = await message.answer_dice(emoji='üé∞')

        await asyncio.sleep(2)

        multiplier = get_roller_multiplier(dice_msg.dice.value)
        if multiplier:
            db[str(message.from_user.id)]['balance'] += int(bid * multiplier)
            await message.answer(f'–£—Ä–∞! –¢—ã –≤—ã–π–≥—Ä–∞–ª {int(bid * multiplier)} —Ä—É–±–ª–µ–π, (–º–Ω–æ–∂–∏—Ç–µ–ª—å {multiplier}), –≤–∞—à –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å {db[str(message.from_user.id)]['balance']}')
        else:
            await message.answer('–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(((')

        await state.clear()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞')
    save_db(db)


@router.message(F.text == '–ö—Ä—É—Ç–∏–ª–∫–∞ 2')
async def dice(message: Message, state: FSMContext):
    log_message(message)

    if db[str(message.from_user.id)]['balance'] >= db[str(message.from_user.id)]['bid']:
        bid = db[str(message.from_user.id)]['bid']
        db[str(message.from_user.id)]['balance'] -= bid

        await state.set_state(user.rolling)
        dice_msg = await message.answer_dice(emoji='üé≤')
        
        
        await asyncio.sleep(2)
        await message.answer(str(dice_msg.dice.value))

        multiplier = get_dice_multiplier(dice_msg.dice.value)
        if multiplier:
            db[str(message.from_user.id)]['balance'] += int(bid * multiplier)
            await message.answer(f'–£—Ä–∞! –¢—ã –≤—ã–π–≥—Ä–∞–ª {int(bid * multiplier)} —Ä—É–±–ª–µ–π, (–º–Ω–æ–∂–∏—Ç–µ–ª—å {multiplier}), –≤–∞—à –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å {db[str(message.from_user.id)]['balance']}')
        else:
            await message.answer('–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(((')

        await state.clear()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞')
    save_db(db)


@router.message(F.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def balance1(message: Message, state: FSMContext):
    log_message(message)

    await state.set_state(user.balance)
    await message.answer(f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')


@router.message(user.balance)
async def balance2(message: Message, state: FSMContext):
    if message.text.isdigit():
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {message.text} —Ä—É–±–ª–µ–π', reply_markup=kb.main)
        db[str(message.from_user.id)]['balance'] += int(message.text)
        save_db(db)
        await state.clear()
    else:
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=kb.main)


@router.message(F.text == '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É')
async def bid1(message: Message, state: FSMContext):
    log_message(message)

    await state.set_state(user.bid)
    await message.answer(f'–Ω–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–∞–≤–∫—É')


@router.message(user.bid)
async def bid2(message: Message, state: FSMContext):
    if message.text.isdigit():
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ç–µ–ø–µ—Ä—å {message.text} —Ä—É–±–ª–µ–π', reply_markup=kb.twisters)
        db[str(message.from_user.id)]['bid'] = int(message.text)
        save_db(db)
        await state.clear()
    else:
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=kb.twisters)


@router.message()
async def wrong_messages(message: Message):
    print(f'[{message.from_user.username}]{message.text}')